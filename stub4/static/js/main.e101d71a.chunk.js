(this.webpackJsonpui=this.webpackJsonpui||[]).push([[0],{16:function(e,t,a){e.exports=a.p+"static/media/stub4.aacb4a57.jpg"},17:function(e,t,a){e.exports=a(32)},22:function(e,t,a){},23:function(e,t,a){},29:function(e,t,a){},30:function(e,t,a){},31:function(e,t,a){},32:function(e,t,a){"use strict";a.r(t);var n=a(0),l=a.n(n),r=a(14),o=a.n(r),s=a(6),u=a(1);a(22);function i(e){var t=e.children;return l.a.createElement("div",{className:"header"},t)}a(23);function c(e){var t=e.children;return l.a.createElement(l.a.Fragment,null,l.a.createElement("h2",{className:"indexTitle"},"Index"),l.a.createElement("ul",null,t))}function m(e){var t,a=e.path,n=e.label,r=Object(u.g)().pathname;return l.a.createElement("li",{className:"indexListItem",key:a},l.a.createElement(s.b,{to:a,className:(t=a,r.startsWith(t)?"selectedDocsLink":"docsLink")},n))}function h(e){var t=e.path,a=e.label,n=t.split("/");n.pop();var r=n.join("/"),o=Object(u.g)().pathname,i=o===t?"selectedSubDocsLink":"subDocsLink";return o.startsWith(r)&&l.a.createElement("li",{className:"indexListSubItem",key:t},l.a.createElement(s.b,{to:t,className:i},a))}a(29);function d(e){var t=e.children;return l.a.createElement(u.d,null,t)}function p(e){var t=e.title;return l.a.createElement("h2",{className:"contentsTitle"},t)}function b(e){var t=e.indentation,a=void 0===t?2:t,n=e.children;return l.a.createElement("pre",{className:"code"},JSON.stringify(n,null,a))}function y(e){var t=e.children;return l.a.createElement("pre",{className:"code"},t)}function E(e){var t=e.children;return l.a.createElement("span",{className:"code"},t)}function f(e){var t=e.to,a=e.children;return l.a.createElement(s.b,{to:t,className:"linkToOtherDocs"},a)}function g(e){var t=e.to,a=e.children;return l.a.createElement("a",{href:t,target:"_blank",className:"externalLink",rel:"noopener noreferrer"},a)}var w=a(16),v=a.n(w);function S(){return l.a.createElement(l.a.Fragment,null,l.a.createElement(p,{title:"Motivation"}),l.a.createElement("p",null,"When building an app or website, tests are your best friends."),l.a.createElement("p",null,"But sometimes, it's useful to just start the thing and see it working."),l.a.createElement("p",null,"Stub4 is an HTTP stub server that allows you to explore your app behaviour under a variety of scenarios. You can use Stub4 to easily verify success and failure cases, fast and slow systems, stateless and stateful interactions."),l.a.createElement("p",null,"You can conveniently setup Stub4 programmatically via its HTTP API, via JSON config files, programmatically through javascript, and via its web UI. You can easily start it as a standalone process or during your tests. You can configure it while it's running via HTTP requests, its javascript client, and its UI."),l.a.createElement("p",null,"Use it for prototyping, testing, demonstrating, and more."),l.a.createElement("img",{className:"screenshot",src:v.a,alt:"A screenshot of the Stub4 Web UI"}))}function k(){return l.a.createElement(l.a.Fragment,null,l.a.createElement(p,{title:"Features"}),l.a.createElement("h3",null,"An Interface for everybody in the team"),l.a.createElement("p",null,"While many stub HTTP servers exist, they are generally only managed by developers, since they need to be setup via HTTP requests, or configured via files and redeployed. Stub4's UI allows anybody to see all setup stubbings, modify and add new, all while your app and Stub4 are running. This is ideal for all those non-technical people in the team who might want to test particular scenarios, for running exploratory testing, for demonstrating and explaining behaviour to business folks."),l.a.createElement("h3",null,"Stubs can act as documentation"),l.a.createElement("p",null,"Making it easy to see all stubbings needed for a particular feature to work can also enable team members to quickly understand how an application works. By using the app and seeing request hitting Stub4 in real time, it becomes easy to understand what is happening behind a particular piece of functionality, and what systems an application interacts with."),l.a.createElement("h3",null,"Stubs can help analyse performance"),l.a.createElement("p",null,"Being able to count all request that hit Stub4 also enables anybody in the team to think about performance considerations. If a request is done many times over, its performance impact can be disproportionate. Making it easy to delay the stub's response, it's easy to understand the performance impact on user experience."),l.a.createElement("h3",null,"Hybrid proxy mode"),l.a.createElement("p",null,"Having proxy functionality built right into Stub4 means that you don't need to change your app's configuration to swap between stubs and real integrations. Just disable Stub4's responses in favour of proxying requests to the real system. You can even run a combination of both, allowing most requests to be proxied, except if they match given criteria. You can even delay proxied requests, to investigate what would happen if one of your downstream systems were to be slow, but without having to stub complex scenarios."),l.a.createElement("h3",null,"Run it as you need it"),l.a.createElement("p",null,"If you need a static stub HTTP server with preprogrammed responses, use JSON files to setup all your stubbings. ",l.a.createElement("br",null),"If you need to write a test for your HTTP client, start Stub4 right in your test, reset it in between tests, and stop it right after. ",l.a.createElement("br",null),"If you have lots of complex and dynamic mocks that could use with some data builders, set it up programmatically in javascript. ",l.a.createElement("br",null),"There's several ways to setup and interact with Stub4, to make sure it works in all situations, and for everybody in the team."))}function x(){return l.a.createElement(l.a.Fragment,null,l.a.createElement(p,{title:"The Request Matcher"}),l.a.createElement("h4",null,"URL"),l.a.createElement("p",null,"The request matcher in a stub must contain at minimum a ",l.a.createElement(E,null,"url"),". If the request received matches the url exactly, the response is sent back. ",l.a.createElement("br",null),"You can also use ",l.a.createElement(E,null,"*")," to match only the start, or end, of a URL. For example"," ",l.a.createElement(E,null,"/the start/*")," or ",l.a.createElement(E,null,"*/the-end")),l.a.createElement("h4",null,"Method"),l.a.createElement("p",null,"The method matcher and the body matcher are both optional and are going to be compared on top of the url matching. If you want to explicitly match any method, you can use"," ",l.a.createElement(E,null,"method: '*'"),". This is equivalent to omitting the method matcher. ",l.a.createElement("br",null),"As the name suggests, the method matcher ensures the method on the request matches the given value. By default any method is accepted and will return a successful response."),l.a.createElement("h4",null,"Body"),l.a.createElement("p",null,"The body matcher will match the contents of the request received. A body matcher can be used for json, as well as xml content. ",l.a.createElement("br",null),"For json, ",l.a.createElement(E,null,"body")," will contain a ",l.a.createElement(E,null,"bodyMatch"),", that will compare key-value pairs. ",l.a.createElement("br",null),"For xml, you'll need to add ",l.a.createElement(E,null,"type: 'xml'"),", and a list of ",l.a.createElement(E,null,"path")," and"," ",l.a.createElement(E,null,"value")," pairs. The paths are"," ",l.a.createElement("a",{href:"https://developer.mozilla.org/en-US/docs/Web/XPath",className:"linkToOtherDocs"},"xPath")," ","expressions that will be executed against the request body received. Their output is then compared to the value provided.",l.a.createElement("br",null),"Here's an example:"," "),l.a.createElement(b,null,{requestMatcher:{method:"POST",url:"/body-match-xml",body:{type:"xml",bodyMatch:[{path:"string(//author)",value:"somebody"}]}}}))}function T(){return l.a.createElement(l.a.Fragment,null,l.a.createElement("p",null,"For more information on the request matcher,"," ",l.a.createElement(f,{to:"/stub4/docs/how/requestMatcher"},"check its documentation page")))}function q(){var e={requestMatcher:{url:"/some-url"},response:{body:{mgs:"User 321 created"},type:"json"}};return l.a.createElement(l.a.Fragment,null,l.a.createElement(p,{title:"Stubs"}),l.a.createElement("p",null,"If you want to simulate an HTTP request-response setup, a stub is a great start. You define"," ","how to match a request, and setup a canned response that will be returned."),l.a.createElement("p",null,"A complete stub definition will look a bit like this:"),l.a.createElement(b,null,e),l.a.createElement(T,null),l.a.createElement(I,null))}function I(){return l.a.createElement(l.a.Fragment,null,l.a.createElement("h3",null,"Response definition"),l.a.createElement("p",null,"A stub response definition can contain:")," ",l.a.createElement("ul",null,l.a.createElement("li",null,l.a.createElement(E,null,"statusCode")," - defaults to ",l.a.createElement(E,null,"200")),l.a.createElement("li",null,l.a.createElement(E,null,"type")," - defaults to ",l.a.createElement(E,null,"application/json")),l.a.createElement("li",null,l.a.createElement(E,null,"body")," - defaults to ",l.a.createElement(E,null,"{}")),l.a.createElement("li",null,l.a.createElement(E,null,"delay")," - defaults to ",l.a.createElement(E,null,"0"),". Defined in milliseconds")),l.a.createElement("p",null,"Here's an example:"),l.a.createElement(b,null,{statusCode:201,type:"application/json",body:{message:"Item created successfully",itemId:"321"},delay:1e3}),l.a.createElement("p",null,"At the moment all properties are optional and will be defaulted as described above, but the"," ",l.a.createElement(E,null,"response")," section needs to be added (this might well change in the future)"))}var j="/stub4/docs/how/stubs";function F(){var e={requestMatcher:{url:"/greet/person/{name}"},outcomes:[{match:{name:"jimmy"},response:{body:{greeting:"Hello from Jimmy"}}},{match:{name:"janny"},response:{body:{greeting:"Hello from Janny"}}},{match:{name:"mystery"},response:{body:{greeting:"mystery guest not found"},statusCode:404}}],default:{response:{body:{greeting:"You're going to need to provide a name",source:"greetings"},statusCode:400}}};return l.a.createElement(l.a.Fragment,null,l.a.createElement(p,{title:"Scenarios"}),l.a.createElement("p",null,"Stubs are useful and convenient for stubbing a single request-response setup, but often you'll find yourself needing to setup slight variations of the same response, based on slightly different request parameters. That's where scenarios can be useful. ",l.a.createElement("br",null),"Setting up scenarios is made up of three parts: define how to match requests, define a default response if you need one, and then define as many outcomes as needed, based on the parameters of requests. ",l.a.createElement("br",null),"Here's an example of a full scenario:"),l.a.createElement(b,null,e),l.a.createElement(N,null),l.a.createElement(P,null))}function N(){return l.a.createElement(l.a.Fragment,null,l.a.createElement("h3",null,"Request Matching"),l.a.createElement("p",null,"The key part of a scenario request matcher is the ",l.a.createElement(E,null,"url"),". This can be an exact match of your requests' url if you want to match on the request body, or you can include variable names in ",l.a.createElement(E,null,"{}")," and reference them in outcomes to match the correct one.",l.a.createElement("br",null),"For example, given this url ",l.a.createElement(E,null,"/some-url/{variableName}"),", and these outcomes"),l.a.createElement(y,{indentation:1},"[",l.a.createElement("br",null),"  { match: { variableName: 'option1' }, response: { statusCode: 200 } }",l.a.createElement("br",null),"  { match: { variableName: 'option2' }, response: { statusCode: 201 } }",l.a.createElement("br",null),"]"),l.a.createElement("p",null,"requests to ",l.a.createElement(E,null,"/some-url/option1")," will get back a"," ",l.a.createElement(E,null,"200"),", where calls to ",l.a.createElement(E,null,"/some-url/option2")," ","will get back a ",l.a.createElement(E,null,"201"),"."),l.a.createElement("p",null,"You can also match on requests body; given this url ",l.a.createElement(E,null,"/some-url"),", and the previous outcomes, requests with body which include"," ",l.a.createElement(E,null,'{"variableName": "option1"}')," will get a"," ",l.a.createElement(E,null,"200"),", requests with body"," ",l.a.createElement(E,null,'{"variableName": "option2"}')," will get"," ",l.a.createElement(E,null,"201"),"."))}function P(){return l.a.createElement(l.a.Fragment,null,l.a.createElement("h3",null,"Outcomes and default"),l.a.createElement("p",null,"Each outcome in a scenario should contain a ",l.a.createElement(E,null,"match")," block, which is used to determine whether the corresponding response should be sent back. This object should be a simple json object, and stub4 will match each key/value pair against either values from the url matcher, or the body received. ",l.a.createElement("br",null),"The response object can contain a ",l.a.createElement(E,null,"statusCode"),", and"," ",l.a.createElement(E,null,"body"),". ",l.a.createElement("br",null),"If many of your outcomes have a common ",l.a.createElement(E,null,"statusCode")," or"," ",l.a.createElement(E,null,"body"),", you can set this values in the"," ",l.a.createElement(E,null,"default.response"),", and only override what you need where appropriate."))}function Y(){var e={requestMatcher:{url:"/some-url"},crud:{idAlias:"personId",patchOnPost:!0,data:[{personId:321,name:"jimbo"}]}};return l.a.createElement(l.a.Fragment,null,l.a.createElement(p,{title:"Cruds"}),l.a.createElement("p",null,"If you want to simulate a REST-like resource repository, and be able to Create, Read, Update, Delete, what you want is a CRUD. You just need to define the URL you want, some initial data if you need some."),l.a.createElement("p",null,"A complete crud definition will look a bit like this:"),l.a.createElement(b,null,e),l.a.createElement(A,null),l.a.createElement(C,null))}function A(){return l.a.createElement(l.a.Fragment,null,l.a.createElement("h3",null,"Request Matching"),l.a.createElement("p",null,"The only part you need in a crud request matcher is the ",l.a.createElement(E,null,"url"),". Stub4 will create an in-memory collection from which you can get items by ID, delete, update and so forth. ",l.a.createElement("br",null),"For example, a crud created with id ",l.a.createElement(E,null,"/some-url")," and containing an object with id ",l.a.createElement(E,null,"321")," will return the item when called with"," ",l.a.createElement(E,null,"/some-url/321"),". You can delete it with a DELETE call, update it with PATCH, and so on."))}function C(){return l.a.createElement(l.a.Fragment,null,l.a.createElement("h3",null,"Crud options"),l.a.createElement("p",null,"On top of allowing you to create a crud with some pre-define data, you can also change the primary key of the items you create and retrieve. By default the key name is"," ",l.a.createElement(E,null,"id"),", but you can change it setting ",l.a.createElement(E,null,"idAlias"),l.a.createElement("br",null),"For example, take the following crud definition:"),l.a.createElement(b,null,{requestMatcher:{url:"/customers"},crud:{data:[{id:321,username:"jbo",name:"jimbo"}]}}),l.a.createElement("p",null,"Because we have not defined a custom ",l.a.createElement(E,null,"idAlias"),", you'll get Jimbo's record from the crud with a call to ",l.a.createElement(E,null,"/customers/321"),".",l.a.createElement("br",null),"If you instead wanted to retrieve records using ",l.a.createElement(E,null,"username")," as the key, you would change the crud definition like so:"),l.a.createElement(b,null,{requestMatcher:{url:"/customers"},crud:{idAlias:"username",data:[{id:321,username:"jbo",name:"jimbo"}]}}),l.a.createElement("p",null,"Now your call to ",l.a.createElement(E,null,"/customers/321")," will return a 404. To get Jimbo's record you'll need to use ",l.a.createElement(E,null,"/customers/jbo"),"."),l.a.createElement("p",null,"Finally, ",l.a.createElement(E,null,"patchOnPost")," makes it such that when you post a record with an id that already existed, instead of entirely overwriting the record, it will update the properties you have sent."),l.a.createElement("h4",null,"Note"),l.a.createElement("p",null,"Query parameters for searching and sorting are not yet supported, but will be soon."))}var H="/stub4/docs/how/cruds";function U(){var e={requestMatcher:{url:"/some-url"},proxy:{destination:{url:"/some-other-url"}}};return l.a.createElement(l.a.Fragment,null,l.a.createElement(p,{title:"Proxy"}),l.a.createElement("p",null,"There are cases where you might want to swap from simulating a service, to just letting your app call it. You can either change the configuration of your app, and point it where you need, and restart it, or you can let your app call Stub4, and have it proxy the request over to any destination. ",l.a.createElement("br",null),"With this, you can easily swap out calling the real thing for a stub at any time you need, without your app ever knowing the difference. ",l.a.createElement("br",null),"(In the future, Stub4 will offer more elaborate controls over its proxy, to allow you to only proxy calls that match specific parameters, to transform requests before sending them back to your app, or introducing faults such as delaying responses for some time.) ",l.a.createElement("br",null),"Here's an example of a proxy:"),l.a.createElement(b,null,e),l.a.createElement(M,null),l.a.createElement(L,null))}function M(){return l.a.createElement(l.a.Fragment,null,l.a.createElement("h3",null,"Request Matching"),l.a.createElement("p",null,"The request matcher in a proxy must contain at minimum a ",l.a.createElement(E,null,"url"),". If the request received matches the url exactly, the response is sent back."),l.a.createElement("p",null,"You can add an optional ",l.a.createElement(E,null,"method")," matcher, which will default to"," ",l.a.createElement(E,null,"GET"),". Body matching will be supported soon."))}function L(){return l.a.createElement(l.a.Fragment,null,l.a.createElement("h3",null,"The destination"),l.a.createElement("p",null,"A proxy currently only allows defining a ",l.a.createElement(E,null,"destination")," and its"," ",l.a.createElement(E,null,"url"),". When a request is matched, it will be proxied over to the destination given, and the response sent back."))}var W="/stub4/docs/how/proxy";function O(){return l.a.createElement(l.a.Fragment,null,l.a.createElement(p,{title:"Concepts"}),l.a.createElement("p",null,"Stub4 offers a few different types of stubbings, which give you all the tools you need to setup your application. You might not need all, so pick whatever fits your requirements.",l.a.createElement("br",null),l.a.createElement("span",{className:"someday"},"Some beautiful day, maybe, these different types of stubbings will be like plugins, and you'll be able to pick and choose whatever you need. Want GraphQL stubbings without having to set them up manually? Just import the right plugin! Someday... Want to get involved?"," ",l.a.createElement(g,{to:"mailto:stub4js@gmail.com"},"Let me know"))),l.a.createElement("h3",null,"Stubs"),l.a.createElement("p",null,"The most straightforward tool Stub4 offers to simulate a real system is a"," ",l.a.createElement("span",{className:"highlightedTerm"},"stub"),". A stub is a simple request-response setup. Given a request matching some parameters, a pre-configured response is returned."),l.a.createElement("p",null,"You can find how to create and use a stub ",l.a.createElement(f,{to:j},"here")),l.a.createElement("p",null,"But that's not all."),l.a.createElement("h3",null,"Scenarios"),l.a.createElement("p",null,"Often, you'll want to simulate a variety of scenarios for the same HTTP call, with different outcomes based on the request sent. To do this, you can use"," ",l.a.createElement("span",{className:"highlightedTerm"},"scenarios"),". Scenarios are similar to stubs, but simplify the process of setting up different responses based on the parameters of the request. You can even setup default values, and only override what you need in a given outcome."),l.a.createElement("p",null,"You can find how to create and use scenarios ",l.a.createElement(f,{to:"/stub4/docs/how/scenarios"},"here")),l.a.createElement("h3",null,"Cruds"),l.a.createElement("p",null,"Another common use case is to simulate straightforward CRUD (Create Read Update Delete) applications that follow REST conventions. For that you'll want to use a"," ",l.a.createElement("span",{className:"highlightedTerm"},"crud"),", which creates an in-memory database that you can add and remove things from via HTTP calls."),l.a.createElement("p",null,"You can find how to create and use cruds ",l.a.createElement(f,{to:H},"here")),l.a.createElement("h3",null,"Proxy"),l.a.createElement("p",null,"In some cases, you might just want to let the traffic reach your downstream systems instead of stubbing it. For that, you can use a ",l.a.createElement("span",{className:"highlightedTerm"},"proxy"),". As the name suggests, all requests hitting a proxy will be forwarded over to a configured target, and responses then relied back to your app.",l.a.createElement("br",null),"This can be useful if you want to simulate your system only in some situations or for specific cases."),l.a.createElement("p",null,"You can find how to create and use a proxy ",l.a.createElement(f,{to:W},"here")))}function R(){return l.a.createElement(l.a.Fragment,null,l.a.createElement(p,{title:"Starting Stub4"}),l.a.createElement("p",null,"You can start Stub4 in a few different ways, to cater for different situations. You can use it as an npm command, start it programmatically via javascript, or start it in your tests directly."),l.a.createElement("h3",null,"Starting Stub4 as an npm command"),l.a.createElement("p",null,"To start Stub4 as an npm command, after installation, add a script to your package.json that calls Stub4, and pass as its first parameter the path to your configuration file.",l.a.createElement("br",null),"(An alternative to this step is installing Stub4 globally. In that case you won't need to define a command in your project's package.json)",l.a.createElement("br",null),"In it you can configure its ports, and logging, and configure files that contain your stubbings. These will be picked up as Stub4 starts. You can add more stubbings later via its API and UI."),l.a.createElement("p",null,"In your package.json:"),l.a.createElement(b,null,{scripts:{stub4:"stub4 config.json"}}),l.a.createElement("p",null,"Then in your console:"),l.a.createElement(E,null,"$ npm run stub4"),l.a.createElement("p",null,"You can learn more about configuring Stub4 ",l.a.createElement(f,{to:"/stub4/docs/how/config"},"here")),l.a.createElement("h3",null,"Starting Stub4 programmatically"),l.a.createElement("p",null,"While setting up your stubbings in JSON files is convenient, sometimes you might want a bit more flexibility and power. In those cases, switching to starting and setting up Stub4 programmatically might be a better option."),l.a.createElement(y,null,"// In yourStub4Config.js\nconst stub4 = require('@stub4/stub4');\n\nstub4.addItems([\n  {\n    requestMatcher: { url: '/something' },\n    response: { body: 'ok' }\n  }\n]);\n\nstub4.startup({ logLevel: 'info' });\nstub4.startUi({ port: 8081 });\n      "),l.a.createElement("p",null,"With this, you have lots more options on how to organise and generate your test data, for example, allowing you to create variables and share them between different stubbings, or use builders to simplify your setup."),l.a.createElement("p",null,"Once you are happy with your setup, add a script to your package.json to invoke your file."),l.a.createElement(y,null,'// In your package.json\n{\n  "scripts": "node yourStub4Config.js"\n}\n      '),l.a.createElement("p",null,"(Something like ",l.a.createElement(E,null,"nodemon")," can be quite useful here.)"),l.a.createElement("h3",null,"Using Stub4 in your tests"),l.a.createElement("p",null,"You can start and stop Stub4 right in your tests, allowing you to add stubbings specific to your test cases, and not having to keep Stub4 running in the background."),l.a.createElement(y,null,"const stub4 = require('@stub4/stub4');\nconst { stubFor, setPort } = require('@stub4/client');\n\ndescribe('uses before each and after each to start and stop stub4', () => {\n  beforeAll(() => {\n    const { port } = stub4.startup();\n    setPort(port);\n  });\n\n  afterEach(() => stub4.clearAll());\n  afterAll(() => stub4.shutdown());\n\n  test('creates a stub', async () => {\n    const port = stub4.stubsPort();\n    await stubFor({ \n      requestMatcher: { url: '/some-url' }, \n      response: { statusCode: 201, body: { message: 'test' } } \n    });\n\n    const stubbedResponse = await axios.get(`http://localhost:${port}/some-url`);\n    expect(stubbedResponse.status).toEqual(201);\n    expect(stubbedResponse.data).toEqual({ message: 'test' });\n  });\n)}\n      "))}var D="/stub4/docs/how/starting",J={defaultsFiles:["./some-path-to-files-with-stubbings.json","./or-some-directory/*"],stubsPort:8080,uiPort:80,logging:{baseLevel:"warn",toIgnore:["proxy"]}};function B(){return l.a.createElement(l.a.Fragment,null,l.a.createElement(p,{title:"Config"}),l.a.createElement("p",null,"There's a few things you can configure in Stub4 when you start it up. Mainly, its ports, and logging level."),l.a.createElement("h3",null,"When starting Stub4 as an npm command"),l.a.createElement("p",null,"If you're starting Stub4 via npm (",l.a.createElement(f,{to:D},"see how to start docs"),") you can pass as first parameter the path to a configuration file. This will be read by Stub4 at start, and used to configure it."),l.a.createElement("p",null," Here's an example:"),l.a.createElement(b,null,J),l.a.createElement("p",null,l.a.createElement(E,null,"stubsPort")," and ",l.a.createElement(E,null,"uiPort")," are the two ports Stub4 will pick when starting up. They don't have to be specified, and if they aren't, Stub4 will automatically pick available ports. They will be logged when the process starts.",l.a.createElement("br",null),"In the ",l.a.createElement(E,null,"logging")," block you can specify the base log level. You can also get Stub4 to not log any logs from a specific type of stubbing (proxy in the example).",l.a.createElement("br",null),"Finally, in ",l.a.createElement(E,null,"defaultsFiles")," you can specify any number of files you'd like Stub4 to read to setup its default stubbings at startup. These can be path to individual JSON files, or glob expressions."),l.a.createElement("h3",null,"When starting Stub4 programmatically"),l.a.createElement("p",null,"When starting Stub4 programmatically things are a bit simpler. The Stub4 object has a handful of methods you can call, but you'll be mainly interested in ",l.a.createElement(E,null,"startup")," and"," ",l.a.createElement(E,null,"startUi"),".",l.a.createElement("br",null),l.a.createElement(E,null,"startup")," accepts an object with two optional keys: ",l.a.createElement(E,null,"port")," and"," ",l.a.createElement(E,null,"logLevel"),". When ",l.a.createElement(E,null,"port")," is not specified, Stub4 will pick any free available one, and return it once started. ",l.a.createElement(E,null,"logLevel")," sets the lowest level of logs logged."," ",l.a.createElement("br",null),l.a.createElement(E,null,"startUi")," accepts a similar object, with two optional keys: ",l.a.createElement(E,null,"port")," and"," ",l.a.createElement(E,null,"stubsPort"),". ",l.a.createElement(E,null,"port")," defines the port where the UI will be served, and any free available port will be picked by default. ",l.a.createElement(E,null,"stubsPort")," tells the UI where to go to communicate with the stub server. This value is defaulted to the port where the stubs started. You should start the stub server before you start the UI."),l.a.createElement(y,null,"stub4.startup({ logLevel: 'info' });\nstub4.startUi({ port: 8081 });"),l.a.createElement("h3",null,"When starting Stub4 in tests"),l.a.createElement("p",null,"Starting Stub4 in tests is similar to starting it programmatically. You can specify its port and log level, but you probably won't need to start its UI. If you're using the"," ",l.a.createElement(E,null,"@stub/client")," in tests, you can quickly configure its port by passing the value returned by Stub4's startup method to the client's ",l.a.createElement(E,null,"setPort"),"."),l.a.createElement(y,null,"const { port } = stub4.startup({ logLevel: 'off' });\nsetPort(port);"))}var G="/stub4/docs/how/config";function z(){return l.a.createElement(l.a.Fragment,null,l.a.createElement(p,{title:"How to use Stub4"}),l.a.createElement("p",null,"There's three ways to setup stubbings in Stub4: the web interface, configuration files, and the test client."),l.a.createElement("h3",null,"The Web Interface"),l.a.createElement("p",null,"By default, when you start Stub4, it opens up two ports on the network: one for managing and using fakes, and one that will serve you a web interface, that you can use to see its current state and add new fakes. ",l.a.createElement("br",null),"On this page you'll be able to see the current stubbings you have created, as well as create new ones. You'll also see any request that didn't match any stubbing setup, and create a new stub from that."),l.a.createElement("h3",null,"Programmatically, and with Config Files"),l.a.createElement("p",null,"You can start Stub4 and configure it directly in a javascript file. Alternatively, you start Stub4 via the CLI, and can point it at a JSON config file. This can be useful to setup some source-controlled defaults that you'll need every time you start Stub4, while still being able to add more after it started.",l.a.createElement("br",null),"You can find more info about how you can configure Stub4 ",l.a.createElement(f,{to:G},"here"),"."),l.a.createElement("h3",null,"The Test Client"),l.a.createElement("p",null,"Finally, you can start and configure Stub4 right in your tests. The Stub4 core library exports functions to start and stop it right from your test. Along with that, another library called ",l.a.createElement(E,null,"@stub4/client")," allows you to setup your fakes with a DLS-like set of functions, that will help you explore what's available and give you type hints and autocomplete."))}function Q(){return l.a.createElement(l.a.Fragment,null,l.a.createElement(p,{title:"Upcoming features"}),l.a.createElement("p",null,"I'm still working on making this awesome. Here's some of the things I'm going to be adding next:"),l.a.createElement("ul",null,l.a.createElement("li",null,"Codegen - A button on the UI that allows you to export a manually created stub to config"),l.a.createElement("li",null,"Wizards - An even easier way to create stubs and more by pointing Stub4 at Swagger/OpenApi documentation"),l.a.createElement("li",null,"Contracts - Actually already partially working but undocumented, the possibility to generate pact contracts from stubs definitions, to ensure they are realistic")))}a(30);function $(e){var t=e.children;return l.a.createElement("div",{className:"Docs"},t,l.a.createElement("div",{className:"docsContent"},l.a.createElement("div",{className:"column"},l.a.createElement(c,null,l.a.createElement(m,{label:"Motivation",path:"/stub4/docs/motivation"}),l.a.createElement(m,{label:"Features",path:"/stub4/docs/features"}),l.a.createElement(m,{label:"Concepts",path:"/stub4/docs/concepts"}),l.a.createElement(m,{label:"How to use it",path:"/stub4/docs/how/"}),l.a.createElement(h,{label:"How to start Stub4",path:D}),l.a.createElement(h,{label:"How to create a stub",path:j}),l.a.createElement(h,{label:"How to create a crud",path:H}),l.a.createElement(h,{label:"How to create scenarios",path:"/stub4/docs/how/scenarios"}),l.a.createElement(h,{label:"How to create a proxy",path:W}),l.a.createElement(h,{label:"Matching requests",path:"/stub4/docs/how/requestMatcher"}),l.a.createElement(h,{label:"How to configure Stub4",path:G}),l.a.createElement(m,{label:"Next",path:"/stub4/docs/next"}))),l.a.createElement("div",{className:"centerColumn"},l.a.createElement(d,null,l.a.createElement(u.b,{exact:!0,path:"/stub4/docs/motivation",component:S}),l.a.createElement(u.b,{exact:!0,path:"/stub4/docs/features",component:k}),l.a.createElement(u.b,{exact:!0,path:"/stub4/docs/concepts",component:O}),l.a.createElement(u.b,{exact:!0,path:"/stub4/docs/how/",component:z}),l.a.createElement(u.b,{path:"/stub4/docs/how/requestMatcher",component:x}),l.a.createElement(u.b,{path:j,component:q}),l.a.createElement(u.b,{path:D,component:R}),l.a.createElement(u.b,{path:H,component:Y}),l.a.createElement(u.b,{path:"/stub4/docs/how/scenarios",component:F}),l.a.createElement(u.b,{path:W,component:U}),l.a.createElement(u.b,{path:G,component:B}),l.a.createElement(u.b,{exact:!0,path:"/stub4/docs/next",component:Q}),l.a.createElement(u.a,{to:"/stub4/docs/motivation"})))))}a(31);function X(){return l.a.createElement(s.a,null,l.a.createElement(u.d,null,l.a.createElement(u.b,{path:"/stub4/docs"},l.a.createElement($,null,l.a.createElement(i,null,l.a.createElement("h1",null,"Welcome to Stub4's Docs!")))),l.a.createElement(u.a,{to:"/stub4/docs"})))}o.a.render(l.a.createElement(X,null),document.getElementById("root"))}},[[17,1,2]]]);
//# sourceMappingURL=main.e101d71a.chunk.js.map