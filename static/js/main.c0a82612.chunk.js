(this.webpackJsonpui=this.webpackJsonpui||[]).push([[0],{17:function(e,t,a){e.exports=a(31)},22:function(e,t,a){},28:function(e,t,a){},29:function(e,t,a){},30:function(e,t,a){},31:function(e,t,a){"use strict";a.r(t);var n=a(0),l=a.n(n),r=a(14),o=a.n(r),s=a(5),u=a(6);a(22);function c(e){var t=e.children;return l.a.createElement(l.a.Fragment,null,l.a.createElement("h2",{className:"indexTitle"},"Index"),l.a.createElement("ul",null,t))}function i(e){var t,a=e.path,n=e.label,r=Object(u.g)().pathname;return l.a.createElement("li",{className:"indexListItem",key:a},l.a.createElement(s.b,{to:a,className:(t=a,r.startsWith(t)?"selectedDocsLink":"docsLink")},n))}function m(e){var t=e.path,a=e.parentPath,n=e.label,r=Object(u.g)().pathname,o=r===t?"selectedSubDocsLink":"subDocsLink";return r.startsWith(a)&&l.a.createElement("li",{className:"indexListSubItem",key:t},l.a.createElement(s.b,{to:t,className:o},n))}a(28);function h(e){var t=e.children;return l.a.createElement(u.d,null,t)}function d(e){var t=e.title;return l.a.createElement("h2",{className:"contentsTitle"},t)}function p(e){var t=e.indentation,a=void 0===t?2:t,n=e.children;return l.a.createElement("pre",{className:"code"},JSON.stringify(n,null,a))}function E(e){var t=e.children;return l.a.createElement("pre",{className:"code"},t)}function y(e){var t=e.children;return l.a.createElement("span",{className:"code"},t)}function b(e){var t=e.to,a=e.children;return l.a.createElement(s.b,{to:t,className:"linkToOtherDocs"},a)}function f(){return l.a.createElement(l.a.Fragment,null,l.a.createElement(d,{title:"Why"}),l.a.createElement("p",null,"When building an app or website, tests are your best friends."),l.a.createElement("p",null,"But sometimes, it's just useful to start the thing and see it working."),l.a.createElement("p",null,"In these cases, you can either point your app at the real system you're integrating with and hope for the best, or you can use Stub4 to simulate it."),l.a.createElement("p",null,"Stub4 allows you to explore your app's behaviour without connecting it to a real live system, and because you have full control, verify what happens in situations that would be hard to encounter in real life."),l.a.createElement("p",null,"You can use if prototyping, testing, demonstrating, and more"))}function g(){return l.a.createElement(l.a.Fragment,null,l.a.createElement(d,{title:"What"}),l.a.createElement("p",null,"Stub4 offers a few tools to simulate systems"),l.a.createElement("h3",null,"Stubs"),l.a.createElement("p",null,"The most straighgtforward tool Stub4 offers to simulate a real system is a"," ",l.a.createElement("span",{className:"highlightedTerm"},"stub"),". A stub is a simple request-response setup. Given a request matching some parameters, a pre-configured response is returned."),l.a.createElement("p",null,"You can find how to create and use a stub ",l.a.createElement(b,{to:"/docs/how/stubs"},"here")),l.a.createElement("p",null,"But that's not all."),l.a.createElement("h3",null,"Scenarios"),l.a.createElement("p",null,"Often, you'll want to simulate a variety of scenarios for the same HTTP call, with different outcomes based on the request sent. To do this, you can use"," ",l.a.createElement("span",{className:"highlightedTerm"},"scenarios"),". Scenarios are similar to stubs, but simplify the process of setting up different responses based on the parameters of the request. You can even setup default values, and only override what you need in a given outcome."),l.a.createElement("p",null,"You can find how to create and use scenarios ",l.a.createElement(b,{to:"/docs/how/scenarios"},"here")),l.a.createElement("h3",null,"Cruds"),l.a.createElement("p",null,"Another common use case is to simulate straightforward CRUD (Create Read Update Delete) applications that follow REST conventions. For that you'll want to use a"," ",l.a.createElement("span",{className:"highlightedTerm"},"crud"),", which creates a small in-memory database that you can add and remove things from via HTTP calls."),l.a.createElement("p",null,"You can find how to create and use cruds ",l.a.createElement(b,{to:"/docs/how/cruds"},"here")),l.a.createElement("h3",null,"Proxy"),l.a.createElement("p",null,"In some cases, you might just want to let the traffic reach your downstream systems instead of stubbing it. For that, you can use a ",l.a.createElement("span",{className:"highlightedTerm"},"proxy"),". As the name suggests, all requests hitting a proxy will be forwarded over to a configured target, and responses then relied back to your app.",l.a.createElement("br",null),"This can be useful if you want to simulate your system only in some situations or for specific cases."),l.a.createElement("p",null,"You can find how to create and use a proxy ",l.a.createElement(b,{to:"/docs/how/proxy"},"here")))}function w(){return l.a.createElement(l.a.Fragment,null,l.a.createElement(d,{title:"Stubs"}),l.a.createElement("p",null,"If you want to simulate an HTTP request-response setup, a stub is a great start. You define how to match a given request, and setup a canned response that will be returned."),l.a.createElement("p",null,"A complete stub definition will look a bit like this:"),l.a.createElement(p,null,{requestMatcher:{url:"/some-url",method:"POST",body:{bodyMatch:{id:321}}},response:{body:{mgs:"User 321 created"},type:"json"}}),l.a.createElement(x,null),l.a.createElement(v,null))}function v(){return l.a.createElement(l.a.Fragment,null,l.a.createElement("h3",null,"Response definition"),l.a.createElement("p",null,"A stub response is defined by a ",l.a.createElement(y,null,"statusCode"),","," ",l.a.createElement(y,null,"type"),", and ",l.a.createElement(y,null,"body"),". Here's an example:"),l.a.createElement(p,null,{statusCode:201,type:"application/json",body:{message:"Item created successfully",itemId:"321"}}),l.a.createElement("p",null,"At the moment all properties are optional, but the ",l.a.createElement(y,null,"response")," section needs to be added (this might well change in the future). All properties have default values: ",l.a.createElement(y,null,"statusCode")," defaults to ",l.a.createElement(y,null,"200"),","," ",l.a.createElement(y,null,"type")," defaults to ",l.a.createElement(y,null,"application/json"),", and"," ",l.a.createElement(y,null,"body")," defaults to ",l.a.createElement(y,null,"{}")))}function x(){return l.a.createElement(l.a.Fragment,null,l.a.createElement("h3",null,"Request Matching"),l.a.createElement("p",null,"The request matcher in a stub must contain at minimum a ",l.a.createElement(y,null,"url"),". If the request received matches the url exactly, the response is sent back."),l.a.createElement("p",null,"The method matcher and the body matcher are both optional and are going to be compared on top of the url matching. If you want to explicitly match any method, you can use"," ",l.a.createElement(y,null,"method: '*'"),". This is equivalent to omitting the method matcher."," ",l.a.createElement("br",null),"As the name suggests, the method matcher ensures the method on the request matches the given value. By default any method is accepted and will return a successful response."),l.a.createElement("p",null,"The body matcher will match the contents of the request received. A body matcher can be used for json, as well as xml content. ",l.a.createElement("br",null),"For json, ",l.a.createElement(y,null,"body")," will contain a ",l.a.createElement(y,null,"bodyMatch"),", that will compare key-value pairs. ",l.a.createElement("br",null),"For xml, you'll need to add ",l.a.createElement(y,null,"type: 'xml'"),", and a list of"," ",l.a.createElement(y,null,"path")," and ",l.a.createElement(y,null,"value")," pairs. The paths are"," ",l.a.createElement("a",{href:"https://developer.mozilla.org/en-US/docs/Web/XPath",className:"linkToOtherDocs"},"xPath")," ","expressions that will be executed agains the request body received. Their output is then compared to the value provided.",l.a.createElement("br",null),"Here's an example:"," "),l.a.createElement(p,null,{requestMatcher:{method:"POST",url:"/body-match-xml",body:{type:"xml",bodyMatch:[{path:"string(//author)",value:"somebody"}]}}}))}function T(){return l.a.createElement(l.a.Fragment,null,l.a.createElement(d,{title:"Cruds"}),l.a.createElement("p",null,"If you want to simulate a REST-like resource repository, and be able to Create, Read, Update, Delete, what you want is a CRUD. You just need to define the URL you want, some initial data if you need some."),l.a.createElement("p",null,"A complete crud definition will look a bit like this:"),l.a.createElement(p,null,{requestMatcher:{url:"/some-url"},crud:{idAlias:"personId",patchOnPost:!0,data:[{personId:321,name:"jimbo"}]}}),l.a.createElement(q,null),l.a.createElement(k,null))}function q(){return l.a.createElement(l.a.Fragment,null,l.a.createElement("h3",null,"Request Matching"),l.a.createElement("p",null,"The only part you need in a crud request matcher is the ",l.a.createElement(y,null,"url"),". Stub4 will create an in-memory collection from which you can get items by ID, delete, update and so forth. ",l.a.createElement("br",null),"For example, a crud created with id ",l.a.createElement(y,null,"/some-url")," and containing an object with id ",l.a.createElement(y,null,"321")," will return the item when called with"," ",l.a.createElement(y,null,"/some-url/321"),". You can delete it with a DELETE call, update it with PATCH, and so on."))}function k(){return l.a.createElement(l.a.Fragment,null,l.a.createElement("h3",null,"Crud options"),l.a.createElement("p",null,"On top of allowing you to create a crud with some pre-define data, you can also change the primary key of the items you create and retrieve. By default the key name is"," ",l.a.createElement(y,null,"id"),", but you can change it setting ",l.a.createElement(y,null,"idAlias"),l.a.createElement("br",null),"For example, take the following crud definition:"),l.a.createElement(p,null,{requestMatcher:{url:"/customers"},crud:{data:[{id:321,username:"jbo",name:"jimbo"}]}}),l.a.createElement("p",null,"Because we have not defined a custom ",l.a.createElement(y,null,"idAlias"),", you'll get Jimbo's record from the crud with a call to ",l.a.createElement(y,null,"/customers/321"),".",l.a.createElement("br",null),"If you instead wanted to retrieve records using ",l.a.createElement(y,null,"username")," as the key, you would change the crud definition like so:"),l.a.createElement(p,null,{requestMatcher:{url:"/customers"},crud:{idAlias:"username",data:[{id:321,username:"jbo",name:"jimbo"}]}}),l.a.createElement("p",null,"Now your call to ",l.a.createElement(y,null,"/customers/321")," will return a 404. To get Jimbo's record you'll need to use ",l.a.createElement(y,null,"/customers/jbo"),"."),l.a.createElement("p",null,"Finally, ",l.a.createElement(y,null,"patchOnPost")," makes it such that when you post a record with an id that already existed, instead of entirely overwriting the record, it will update the properties you have sent."))}function j(){return l.a.createElement(l.a.Fragment,null,l.a.createElement(d,{title:"Scenarios"}),l.a.createElement("p",null,"Stubs are useful and convenient for mocking a single request-response setup, but often you'll find yourself needing to setup slight variations of the same response, based on slightly different request parameters. That's where scenarios become very useful. ",l.a.createElement("br",null),"Setting up scenarios is made up of three parts: define how to match requests, define a default response if you need one, and then define as many outcomes as needed, based on the parameters of requests. ",l.a.createElement("br",null),"Here's an example of a full scenario:"),l.a.createElement(p,null,{requestMatcher:{url:"/greet/person/{name}"},outcomes:[{match:{name:"jimmy"},response:{body:{greeting:"Hello from Jimmy"}}},{match:{name:"janny"},response:{body:{greeting:"Hello from Janny"}}},{match:{name:"mistery"},response:{body:{greeting:"mistery guest not found"},statusCode:404}}],default:{response:{body:{greeting:"You're going to need to provide a name",source:"greetings"},statusCode:200}}}),l.a.createElement(N,null),l.a.createElement(S,null))}function N(){return l.a.createElement(l.a.Fragment,null,l.a.createElement("h3",null,"Request Matching"),l.a.createElement("p",null,"The only part you need in a crud request matcher is the ",l.a.createElement(y,null,"url"),". This can be an exact match of your requests' url if you want to match on the request body, or you can include variable names in ",l.a.createElement(y,null,"{}")," and reference them in outcomes to match the correct one.",l.a.createElement("br",null),"For example, given this url ",l.a.createElement(y,null,"/some-url/{variableName}"),", and these outcomes"),l.a.createElement(E,{indentation:1},"[",l.a.createElement("br",null),"  { match: { variableName: 'option1' }, response: { statusCode: 200 } }",l.a.createElement("br",null),"  { match: { variableName: 'option2' }, response: { statusCode: 201 } }",l.a.createElement("br",null),"]"),l.a.createElement("p",null,"requests to ",l.a.createElement(y,null,"/some-url/option1")," will get back a"," ",l.a.createElement(y,null,"200"),", where calls to ",l.a.createElement(y,null,"/some-url/option2")," ","will get back a ",l.a.createElement(y,null,"201"),"."),l.a.createElement("p",null,"You can also match on requests body; given this url ",l.a.createElement(y,null,"/some-url"),", and the previous outcomes, requests with body which include"," ",l.a.createElement(y,null,'{"varibleName": "option1"}')," will get a"," ",l.a.createElement(y,null,"200"),", requests with body"," ",l.a.createElement(y,null,'{"varibleName": "option2"}')," will get"," ",l.a.createElement(y,null,"201"),"."))}function S(){return l.a.createElement(l.a.Fragment,null,l.a.createElement("h3",null,"Outcomes and default"),l.a.createElement("p",null,"Each outcome in a scenario should contain a ",l.a.createElement(y,null,"match")," block, which is used to determine whether the corresponding response should be sent back. This object should be a simple json object, and stub4 will match each key/value pair against either values from the url matcher, or the body received. ",l.a.createElement("br",null),"The response object can contain a ",l.a.createElement(y,null,"statusCode"),", and"," ",l.a.createElement(y,null,"body"),". ",l.a.createElement("br",null),"If many of your outcomes have a common ",l.a.createElement(y,null,"statusCode")," or"," ",l.a.createElement(y,null,"body"),", you can set this values in the"," ",l.a.createElement(y,null,"default.response"),", and only override what you need where appropriate."))}function F(){return l.a.createElement(l.a.Fragment,null,l.a.createElement(d,{title:"Proxy"}),l.a.createElement("p",null,"There are cases where you might want to swap from simulating a service, to just letting your app call it. You can either change the configuration of your app, and point it where you need, and restart it, or you can let your app call Stub4, and have it proxy the request over to any destination. ",l.a.createElement("br",null),"With this, you can easily swap out calling the real thing for a stub at any time you need, without your app ever knowing the difference. ",l.a.createElement("br",null),"(In the future, Stub4 will offer more elaborate controls over its proxy, to allow you to only proxy calls that match specific parameters, to transform requests before sending them back to your app, or introducing faults such as delaying responses for some time.) ",l.a.createElement("br",null),"Here's an example of a proxy:"),l.a.createElement(p,null,{requestMatcher:{url:"/some-url"},proxy:{destination:{url:"/some-other-url"}}}),l.a.createElement(I,null),l.a.createElement(C,null))}function I(){return l.a.createElement(l.a.Fragment,null,l.a.createElement("h3",null,"Request Matching"),l.a.createElement("p",null,"The request matcher in a proxy must contain at minimum a ",l.a.createElement(y,null,"url"),". If the request received matches the url exactly, the response is sent back."),l.a.createElement("p",null,"You can add an optional ",l.a.createElement(y,null,"method")," matcher, which will default to"," ",l.a.createElement(y,null,"GET"),". Body matching will be supported soon."))}function C(){return l.a.createElement(l.a.Fragment,null,l.a.createElement("h3",null,"The destination"),l.a.createElement("p",null,"A proxy currently only allows defining a ",l.a.createElement(y,null,"destination")," and its"," ",l.a.createElement(y,null,"url"),". When a request is matched, it will be proxied over to the destination given, and the response sent back."))}function A(){return l.a.createElement(l.a.Fragment,null,l.a.createElement(d,{title:"How to use it"}),l.a.createElement("p",null,"There's a few ways you can setup Stub4. One is via the provided web-based interface. Stub4 will serve you a web app that allows you to manage your setup on the fly, adding and removing configuration. This can be useful to demonstrate what your app does when changing the response of the systems it integrates with. If you find yourself wanting to setup the same configurations many times, or even better through code and config, you can specify your desired configuration in one or more json files. Here's a few examples:"),l.a.createElement(p,null,{stubs:[{requestMatcher:{url:"/some-url",method:"GET"},response:{body:"this was setup",type:"text"}},{requestMatcher:{method:"POST",url:"/body-match",body:{bodyMatch:{id:321}}},response:{body:{mgs:"User 321 created"},type:"json"}}],cruds:[{requestMatcher:{url:"/some-crud-url"},idAlias:"customerId",data:[{customerId:1,some:"content"},{customerId:3,some:"stuff"}]}],scenarios:[{requestMatcher:{url:"/dude/{id}"},outcomes:[{match:{id:1},response:{body:{hey:"other"}}},{match:{id:2},response:{body:{hey:"other"}}}],default:{response:{body:{hey:"some"},statusCode:200}}}]}),l.a.createElement("p",null,"Finally, you might only want some behaviours to be setup for the scope of a test you're running. The most effective way of doing this is using the stub4-client, which will help you setup your config from json object, or through builder-like functions."))}function M(){return l.a.createElement(l.a.Fragment,null,l.a.createElement(d,{title:"Upcoming features"}),l.a.createElement("p",null,"I'm still working on making this awesome. Here's some of the things I'm going to be adding next:"),l.a.createElement("ul",null,l.a.createElement("li",null,"Delays - Allow you to simulate a slow system, by delaying responses"),l.a.createElement("li",null,"Codegen - A button on the UI that allows you to export a manually created stub to config"),l.a.createElement("li",null,"Wizards - An even easier way to create stubs and more by pointing Stub4 at Swagger/OpenApi documentation"),l.a.createElement("li",null,"Contracts - Actually already partially working but undocumented, the possibility to generate pact contracts from stubs definitions, to ensure they are realistic")))}a(29);function H(e){var t=e.children,a=Object(n.useContext)(P),r=function(e){return"".concat(a).concat(e)};return l.a.createElement("div",{className:"docsBody"},l.a.createElement("div",null,t,l.a.createElement("h1",{className:"docsTitle"},"Welcome to the Docs!")),l.a.createElement("div",{className:"docsContent"},l.a.createElement("div",{className:"column"},l.a.createElement(c,null,l.a.createElement(i,{label:"Motivation",path:r("docs/why")}),l.a.createElement(i,{label:"How it works",path:r("docs/what")}),l.a.createElement(i,{label:"How to use it",path:r("docs/how")}),l.a.createElement(m,{label:"How to create a stub",path:r("docs/how/stubs"),parentPath:r("docs/how")}),l.a.createElement(m,{label:"How to create a crud",path:r("docs/how/cruds"),parentPath:r("docs/how")}),l.a.createElement(m,{label:"How to create scenarios",path:r("docs/how/scenarios"),parentPath:r("docs/how")}),l.a.createElement(m,{label:"How to create a proxy",path:r("docs/how/proxy"),parentPath:r("docs/how")}),l.a.createElement(i,{label:"Next",path:r("docs/next")}))),l.a.createElement("div",{className:"centerColumn"},l.a.createElement(h,null,l.a.createElement(u.b,{path:r("docs/why"),component:f}),l.a.createElement(u.b,{path:r("docs/what"),component:g}),l.a.createElement(u.b,{path:r("docs/how/stubs"),component:w}),l.a.createElement(u.b,{path:r("docs/how/cruds"),component:T}),l.a.createElement(u.b,{path:r("docs/how/scenarios"),component:j}),l.a.createElement(u.b,{path:r("docs/how/proxy"),component:F}),l.a.createElement(u.b,{path:r("docs/how"),component:A}),l.a.createElement(u.b,{path:r("docs/next"),component:M}),l.a.createElement(u.a,{to:r("docs/why")})))))}a(30);var P=l.a.createContext();o.a.render(l.a.createElement((function(){return l.a.createElement(s.a,null,l.a.createElement(u.d,null,l.a.createElement(u.b,{path:"/stub4/docs"},l.a.createElement(P.Provider,{value:"/stub4/"},l.a.createElement(H,null))),l.a.createElement(u.a,{to:"/stub4/docs"})))}),null),document.getElementById("root"))}},[[17,1,2]]]);
//# sourceMappingURL=main.c0a82612.chunk.js.map